{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/blob1.png","webpack:///./assets/blob2.png","webpack:///./assets/blob3.png","webpack:///./assets/cat1.png","webpack:///./assets/cat2.png","webpack:///./assets/cat3.png","webpack:///./assets/hadoken1.png","webpack:///./assets/rig.gif","webpack:///./assets/tree.jpg","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/projectile.js","webpack:///./src/unit.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,mBAAmB,mBAAO,CAAC,yCAAc;AACzC,aAAa,mBAAO,CAAC,6CAAoB;AACzC,YAAY,mBAAO,CAAC,2CAAmB;;;AAGvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa,G;AACb,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,6BAA6B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,uBAAuB;AACjD;;;AAGA;;AAEA,0BAA0B,6BAA6B;AACvD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sB;;;;;;;;;;;ACnLA,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2D;AACA;AACA,K;;AAEA,yD;AACA;AACA,K;;;AAGA,CAAC;;;;;;;;;;;;ACpBD,mBAAmB,mBAAO,CAAC,qDAAwB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;ACzBA;AACA,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,mBAAmB,mBAAO,CAAC,yCAAc;;;AAGzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","module.exports = __webpack_public_path__ + \"c5aac480279d615489d5de5581a2759a.png\";","module.exports = __webpack_public_path__ + \"1b56b4d1e45440ad997445b637aa7985.png\";","module.exports = __webpack_public_path__ + \"4da03cea04ff485f442c814c507fac5c.png\";","module.exports = __webpack_public_path__ + \"942b83797e1b65529eaf1900aaf8d563.png\";","module.exports = __webpack_public_path__ + \"bb1b51a1f057579138c78f85d865933d.png\";","module.exports = __webpack_public_path__ + \"b128e8f0e620cebcc2d30907d7889055.png\";","module.exports = __webpack_public_path__ + \"7fb4ec026a28fb69882b7a2cfec4d164.png\";","module.exports = __webpack_public_path__ + \"e20eb9907f931c3918d6144669c7e0a5.gif\";","module.exports = __webpack_public_path__ + \"c14702dca898c96e30e0a8f26590c72c.jpg\";","const Unit = require(\"./unit\");\nconst Projectile = require(\"./projectile\");\nconst tree = require(\"../assets/tree.jpg\")\nconst rig = require(\"../assets/rig.gif\")\n\n\nclass Game {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.units = [];\n        this.projectiles = [];\n    }\n\n    createArmy(team, type) {\n        let startPos;\n        let vel;\n\n        if(team === \"green\") {\n            startPos = 200\n            vel = [1,0]\n            type ='cat'\n        } else {\n            startPos = 700\n            vel = [-1,0]\n            type = 'blob'\n        }\n\n        for (let i = 175; i < 325; i+=50) {\n            this.units.push(new Unit({\n                pos: [startPos,i],\n                vel,\n                team,\n                type,\n            }));        \n        } \n    }\n\n    drawBoard() {\n        //arena\n        let grd = this.ctx.createLinearGradient(0, 0, 800, 0);\n        grd.addColorStop(0, \"#4bb436\");\n        grd.addColorStop(1, \"#aa6300\");\n        this.ctx.fillStyle = grd;\n        this.ctx.fillRect(50,150,800,200)\n\n        //green's base\n        let greenBase = new Image(200,200);\n        greenBase.src = tree;\n        this.ctx.drawImage(greenBase, 75, 215, 50, 50);\n\n        \n        //red's base\n        let redBase = new Image();\n        redBase.width = \"25\";\n        redBase.src = rig;\n        this.ctx.drawImage(redBase, 775, 215, 50, 50);\n        \n    }\n\n    drawUnits() {\n        this.units.forEach(unit => {\n            unit.draw(this.ctx);\n        });\n    }\n\n    drawProjectiles() {\n        this.projectiles.forEach(projectile => {\n            projectile.draw(this.ctx);\n        });\n    }\n\n    distance(pos1, pos2) {\n        let a = pos1[0] - pos2[0];\n        let b = pos1[1] - pos2[1];\n        return Math.sqrt( a*a + b*b );\n    }\n\n    acquireTarget(currentUnit) {\n        let enemyInRange = false;\n        // let allyInRange = false;\n\n        this.units.forEach(otherUnit => {\n            let distance = this.distance(currentUnit.pos, otherUnit.pos)\n            if ( distance <= 200 && currentUnit.team != otherUnit.team) {\n                enemyInRange = true;\n                let newProjectile = currentUnit.attack();\n                if (newProjectile) {\n                    this.projectiles.push(newProjectile);\n                    console.log(\"projectile created!\");\n                }\n            }\n        });\n        return enemyInRange;\n    }\n    \n\n    checkCollisions() {\n        //for each unit,\n        for (let i = 0; i < this.units.length; i++) {\n            let unit = this.units[i];\n            let x1 = unit.pos[0] - unit.width/2\n            let x2 = unit.pos[0] + unit.width/2\n            let y1 = unit.pos[1] - unit.height/2\n            let y2 = unit.pos[1] + unit.height/2\n\n            for (let j = 0; j < this.projectiles.length; j++) {\n\n                let projectile = this.projectiles[j];\n                let x3 = projectile.pos[0] - projectile.width/2\n                let x4 = projectile.pos[0] + projectile.width/2\n                let y3 = projectile.pos[1] - projectile.height/2\n                let y4 = projectile.pos[1] + projectile.height/2\n                if (\n                    ((x1 <= x3 && x2 >= x3) || (x1 <= x4 && x2 >= x4))\n                    && ((y1 <= y3 && y2 >= y3) || (y1 <= y4 && y2 >= y4))\n                    ) {\n                        //on collision, removes both projectile and enemy\n                        if (unit.team != projectile.team) {\n                            this.units.splice(i,1)\n                            this.projectiles.splice(j,1)\n                        }\n                }\n            }\n        }\n    }\n\n    // checkBounds() {\n    //     for (let i = 0; i < this.units.length; i++) {\n    //         let unit = units[i];\n\n\n    //     }\n\n    //     for (let j = 0; j < this.projectiles.length; j++) {\n    //         let projectile = projectiles[i];\n\n    //     }\n\n    // }\n    \n    moveUnits() {\n        //this is horrible brute force - should optimize later, esp. if performance issues\n        this.units.forEach(unit => {\n            if(this.acquireTarget(unit) === true) {\n                unit.moving = false;\n                unit.attacking = true;\n            } else {\n                unit.moving = true;\n                unit.attacking = false;\n            }\n            if(unit.moving === true) unit.move();\n        });\n    }\n\n    moveProjectiles() {\n        this.projectiles.forEach(projectile => {\n            projectile.move();\n        })\n    }\n\n    drawAll() {\n        this.ctx.clearRect(0, 0, 900, 400);\n        this.drawBoard();\n        this.drawUnits();\n        this.drawProjectiles();\n    }\n\n    start() {\n        this.createArmy(\"green\");\n        this.createArmy(\"red\");\n        setInterval(() => {\n            this.drawAll();\n            this.moveUnits();\n            this.moveProjectiles();\n            this.checkCollisions();\n        }, 5) //17 is \"standard\" speed\n    }\n}\n\nmodule.exports = Game;","const Game = require(\"./game\")\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvasEl = document.getElementById(\"canvas\");\n    canvasEl.width = 900;\n    canvasEl.height = 400;\n\n    const ctx = canvas.getContext('2d');\n    game = new Game(ctx);\n    game.start();\n\n    document.getElementById(\"spawnGreen\").onclick = () => { \n        game.createArmy('green');\n    } \n\n    document.getElementById(\"spawnRed\").onclick = () => { \n        game.createArmy('red');\n    } \n\n\n})\n","const hadokenUrl = require(\"../assets/hadoken1.png\")\n\nclass Projectile {\n    constructor(obj) {\n        this.pos = obj.pos;\n        this.vel = obj.vel;\n        this.team = obj.team;\n        this.width = 50;\n        this.height = 50;\n    }\n\n    draw(ctx) {\n        let hadoken = new Image();\n        hadoken.src = hadokenUrl;\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(hadoken, x, y, this.width, this.height)\n    }\n\n    move() {\n        this.pos[0] += this.vel[0];\n        this.pos[1] += this.vel[1];\n    }\n}\n\nmodule.exports = Projectile;","// const Game = require(\"./game.js\");\nconst catUrl1 = require(\"../assets/cat1.png\")\nconst catUrl2 = require(\"../assets/cat2.png\")\nconst catUrl3 = require(\"../assets/cat3.png\")\nconst blobUrl1 = require(\"../assets/blob1.png\")\nconst blobUrl2 = require(\"../assets/blob2.png\")\nconst blobUrl3 = require(\"../assets/blob3.png\")\nconst Projectile = require(\"./projectile\");\n\n\nconst ANIMATE_FRAMES = 8;\n\nclass Unit {\n\n    constructor(obj) {\n        this.pos = obj.pos;\n        this.vel = obj.vel;\n        this.team = obj.team;\n        this.type = obj.type;\n        this.animationFrame = 0;\n        this.moving = true;\n        this.attacking = false;\n        this.attackCooldown = 300;\n        this.timeBetweenAttacks = 300;\n        this.projectile = 'hadoken';\n        this.width = 50;\n        this.height = 50;\n    }\n\n    draw(ctx) {\n        if (this.type === 'cat') {\n            this.renderCat(ctx);\n        } else {\n            this.renderBlob(ctx);\n        }\n    }\n\n    renderCat(ctx) {\n        let cat = new Image();\n        \n        if (this.moving === true) this.animationFrame += 1;\n\n        if(this.animationFrame < ANIMATE_FRAMES) {\n            cat.src = catUrl1;\n        } else if(this.animationFrame >= ANIMATE_FRAMES*2) {\n            cat.src = catUrl2;\n        } else {\n            cat.src = catUrl3;\n        }\n\n        if (this.animationFrame >= ANIMATE_FRAMES * 3) this.animationFrame = 0;\n\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(cat, x, y, this.width, this.height);\n    }\n\n    renderBlob(ctx) {\n        let blob = new Image();\n\n        if (this.moving === true) this.animationFrame += 1;\n        \n        if(this.animationFrame < ANIMATE_FRAMES) {\n            blob.src = blobUrl1;\n        } else if(this.animationFrame >= ANIMATE_FRAMES*2) {\n            blob.src = blobUrl2;\n        } else {\n            blob.src = blobUrl3;\n        }\n\n        if (this.animationFrame >= ANIMATE_FRAMES * 3) this.animationFrame = 0;\n\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(blob, x, y, this.width, this.height);\n    }\n\n    attack() {\n        \n        let vel;\n        if (this.team === 'green') {\n            vel = [2,0]\n        } else {\n            vel = [-2,0]\n        }    \n        if (this.attackCooldown >= this.timeBetweenAttacks) {\n            this.attackCooldown = 0;\n            let pos = this.pos.slice(0)\n            let team = this.team\n            return new Projectile({\n                pos,\n                vel,\n                team,\n            })\n        } else {\n            this.attackCooldown += 1;\n            return null;\n        }    \n    }\n\n    move() {\n        this.pos[0] += this.vel[0];\n        this.pos[1] += this.vel[1];\n    }\n}\n\nmodule.exports = Unit;"],"sourceRoot":""}