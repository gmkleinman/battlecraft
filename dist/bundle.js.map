{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/blob1.png","webpack:///./assets/blob2.png","webpack:///./assets/blob3.png","webpack:///./assets/cat1.png","webpack:///./assets/cat2.png","webpack:///./assets/cat3.png","webpack:///./assets/hadoken1.png","webpack:///./assets/rig.gif","webpack:///./assets/tree.jpg","webpack:///./src/base.js","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/player.js","webpack:///./src/projectile.js","webpack:///./src/unit.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,aAAa,mBAAO,CAAC,6CAAoB;AACzC,YAAY,mBAAO,CAAC,2CAAmB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACjDA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA,iBAAiB,G;AACjB,a;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,6BAA6B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;;AAEA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,uDAAuD,qBAAqB;AAC5E;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sB;;;;;;;;;;;ACzOA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yD;AACA;AACA,K;;AAEA,0D;AACA;AACA,K;;AAEA,CAAC;;;;;;;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;;ACjCA,mBAAmB,mBAAO,CAAC,qDAAwB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;AC1BA;AACA,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,gBAAgB,mBAAO,CAAC,6CAAoB;AAC5C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,iBAAiB,mBAAO,CAAC,+CAAqB;AAC9C,mBAAmB,mBAAO,CAAC,yCAAc;;AAEzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","module.exports = __webpack_public_path__ + \"c5aac480279d615489d5de5581a2759a.png\";","module.exports = __webpack_public_path__ + \"1b56b4d1e45440ad997445b637aa7985.png\";","module.exports = __webpack_public_path__ + \"4da03cea04ff485f442c814c507fac5c.png\";","module.exports = __webpack_public_path__ + \"942b83797e1b65529eaf1900aaf8d563.png\";","module.exports = __webpack_public_path__ + \"bb1b51a1f057579138c78f85d865933d.png\";","module.exports = __webpack_public_path__ + \"b128e8f0e620cebcc2d30907d7889055.png\";","module.exports = __webpack_public_path__ + \"7fb4ec026a28fb69882b7a2cfec4d164.png\";","module.exports = __webpack_public_path__ + \"e20eb9907f931c3918d6144669c7e0a5.gif\";","module.exports = __webpack_public_path__ + \"c14702dca898c96e30e0a8f26590c72c.jpg\";","const tree = require(\"../assets/tree.jpg\")\nconst rig = require(\"../assets/rig.gif\")\n\nclass Base {\n    constructor(team) {\n        this.vel = [0,0];\n        this.team = team;\n        this.type = 'base';\n        this.animationFrame = 0;\n        this.moving = true;\n        this.attacking = false;\n        this.attackCooldown = 300;\n        this.timeBetweenAttacks = 300;\n        this.projectile = 'hadoken';\n        this.hp = 10;\n        this.width = 100;\n        this.height = 100;\n\n        if (team === 'green') {\n            this.pos = [50,175];\n        } else {\n            this.pos = [1050,175]\n        }\n    }\n\n    attack(pos) {\n        return null;\n    }\n\n    move() {\n        return null;\n    }\n\n    draw(ctx) {\n        let x = this.pos[0];\n        let y = this.pos[1];\n        if (this.team === 'green') {\n            let greenBase = new Image();\n            greenBase.src = tree;\n            ctx.drawImage(greenBase, x, y, this.width, this.height);\n        } else {\n            let redBase = new Image();\n            redBase.src = rig;\n            ctx.drawImage(redBase, x, y, this.width, this.height);\n        }\n\n    }\n}\n\nmodule.exports = Base;\n","const Unit = require(\"./unit\");\nconst Base = require('./base')\nconst Player = require('./player')\n\nconst MIN_X = 0;\nconst MAX_X = 1200;\nconst MIN_Y = 0;\nconst MAX_Y = 400;\n\nclass Game {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.units = [];\n        this.projectiles = [];\n        this.players = [];\n    }\n\n    createPlayers() {\n        this.players.push(\n            new Player('green'),\n            new Player('red'))\n    }\n\n    createBases() {\n        this.units.push(\n            new Base('green'), \n            new Base('red'))\n    }\n\n    createArmy(player, type) {\n        let startPos;\n        let vel;\n\n        if(player.team === \"green\") {\n            startPos = MIN_X + 150\n            vel = [1,0]\n        } else {\n            startPos = MAX_X - 250\n            vel = [-1,0]\n        }\n\n        if( player.spend(1000) ) {\n            for (let i = MIN_Y+100; i < MAX_Y-100; i+=55) {\n                this.units.push(new Unit({\n                    pos: [startPos + Math.random()*50,i],\n                    vel,\n                    team: player.team,\n                    type,\n                }));        \n            } \n        }\n\n    }\n\n    drawArena() {\n        let grd = this.ctx.createLinearGradient(0, 0, MAX_X, 0);\n        grd.addColorStop(0, \"#4bb436\");\n        grd.addColorStop(1, \"#aa6300\");\n        this.ctx.fillStyle = grd;\n        this.ctx.fillRect(MIN_X,MIN_Y,MAX_X,MAX_Y)\n    }\n\n    drawUnits() {\n        this.units.forEach(unit => {\n            unit.draw(this.ctx);\n        });\n    }\n\n    drawProjectiles() {\n        this.projectiles.forEach(projectile => {\n            projectile.draw(this.ctx);\n        });\n    }\n\n    distance(pos1, pos2) {\n        let a = pos1[0] - pos2[0];\n        let b = pos1[1] - pos2[1];\n        return Math.sqrt( a*a + b*b );\n    }\n\n    acquireTarget(currentUnit) {\n        let target = 'none';\n\n        this.units.forEach(otherUnit => {\n            let distance = this.distance(currentUnit.pos, otherUnit.pos)\n            if ( distance <= 200 && currentUnit.team != otherUnit.team) {\n                target = 'enemy';\n                let newProjectile = currentUnit.attack(otherUnit.pos);\n                if (newProjectile) {\n                    this.projectiles.push(newProjectile);\n                }\n            } else if(currentUnit.team === otherUnit.team && this.checkAllyCollision(currentUnit, otherUnit)) {\n                target = 'ally';\n            }\n        });\n        return target;\n    }\n    \n\n    checkProjectileCollisions() {\n        for (let i = 0; i < this.units.length; i++) {\n            let unit = this.units[i];\n            let x1 = unit.pos[0] - unit.width/2\n            let x2 = unit.pos[0] + unit.width/2\n            let y1 = unit.pos[1] - unit.height/2\n            let y2 = unit.pos[1] + unit.height/2\n\n            for (let j = 0; j < this.projectiles.length; j++) {\n\n                let projectile = this.projectiles[j];\n                let x3 = projectile.pos[0] - projectile.width/2\n                let x4 = projectile.pos[0] + projectile.width/2\n                let y3 = projectile.pos[1] - projectile.height/2\n                let y4 = projectile.pos[1] + projectile.height/2\n                if (\n                    ((x1 <= x3 && x2 >= x3) || (x1 <= x4 && x2 >= x4))\n                    && ((y1 <= y3 && y2 >= y3) || (y1 <= y4 && y2 >= y4))\n                    ) {\n                        if (unit.team != projectile.team) {\n                            unit.hp -= projectile.damage;\n                            this.projectiles.splice(j,1)\n                        }\n                }\n            }\n        }\n    }\n\n    checkAllyCollision(ally1, ally2) { //this is not DRY, fix later\n        if(ally1 === ally2) return false;\n        let x1 = ally1.pos[0] - ally1.width/2\n        let x2 = ally1.pos[0] + ally1.width/2\n        let y1 = ally1.pos[1] - ally1.height/2\n        let y2 = ally1.pos[1] + ally1.height/2\n        let x3 = ally2.pos[0] - ally2.width/2\n        let x4 = ally2.pos[0] + ally2.width/2\n        let y3 = ally2.pos[1] - ally2.height/2\n        let y4 = ally2.pos[1] + ally2.height/2\n        if (((x1 <= x3 && x2 >= x3) || (x1 <= x4 && x2 >= x4))\n            && ((y1 <= y3 && y2 >= y3) || (y1 <= y4 && y2 >= y4))) {\n            if (ally1.team === 'green' && x3 >= x1) {\n                return true;\n            } else if (ally1.team === 'red' && x1 >= x3) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    checkEliminations() {\n        for (let i = 0; i < this.units.length; i++) {\n            let unit = this.units[i];\n            if (unit.hp <= 0) {\n                this.units.splice(i,1)\n            }\n        }\n    }\n\n    outOfBounds(pos) {\n        return pos[0] > MAX_X-50 || pos[0] < MIN_X-50 || pos[1] > MAX_Y-50 || pos[1] < MIN_Y-50\n    }\n\n    ensureInBounds() {\n        for (let i = 0; i < this.units.length; i++) {\n            let unit = this.units[i];\n            if(this.outOfBounds(unit.pos)) this.units.splice(i,1)\n        }\n\n        for (let j = 0; j < this.projectiles.length; j++) {\n            let projectile = this.projectiles[j];\n            if(this.outOfBounds(projectile.pos)) this.projectiles.splice(j,1)\n        }\n    }\n    \n    moveUnits() {\n        //this is horrible brute force - should optimize later, esp. if performance issues\n        this.units.forEach(unit => {\n            let target = this.acquireTarget(unit)\n            if(target === 'enemy') {\n                unit.moving = false;\n                unit.attacking = true;\n            } else if(target === 'ally') {\n                unit.moving = false;\n                unit.attacking = false;\n            } else {\n                unit.moving = true;\n                unit.attacking = false;\n            }\n            if(unit.moving === true) unit.move();\n        });\n    }\n\n    moveProjectiles() {\n        this.projectiles.forEach(projectile => {\n            projectile.move();\n        })\n    }\n\n    drawAll() {\n        this.ctx.clearRect(MIN_X, MIN_Y, MAX_X, MAX_Y);\n        this.drawArena();\n        this.drawUnits();\n        this.drawProjectiles();\n    }\n\n    giveIncome(){\n        this.players.forEach(player => {\n            player.earn();\n        })\n    }\n\n    renderGold() {\n        document.getElementById('gold').innerHTML = `${this.players[0].gold}`\n    }\n\n    start() {\n        this.createPlayers();\n        this.createArmy(this.players[0], 'cat');\n        this.createArmy(this.players[1], 'blob');\n        this.createBases();\n\n        setInterval(() => {\n            this.drawAll();\n            this.moveUnits();\n            this.moveProjectiles();\n            this.checkProjectileCollisions();\n            this.checkEliminations();\n            this.ensureInBounds();\n            this.giveIncome();\n            this.renderGold();\n        }, 17) //17 is \"standard\" speed\n    }\n}\n\nmodule.exports = Game;","const Game = require(\"./game\")\nconst GAMEHEIGHT = 400\nconst GAMEWIDTH = 1200\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvasEl = document.getElementById(\"canvas\");\n    canvasEl.width = GAMEWIDTH;\n    canvasEl.height = GAMEHEIGHT;\n\n    const ctx = canvas.getContext('2d');\n    game = new Game(ctx);\n    game.start();\n\n    document.getElementById(\"spawnCat\").onclick = () => { \n        game.createArmy(game.players[0], 'cat');\n    } \n\n    document.getElementById(\"spawnBlob\").onclick = () => { \n        game.createArmy(game.players[1], 'blob');\n    } \n\n})\n","class Player {\n    constructor(team) {\n        this.team = team;\n        this.gold = 1000;\n        this.income = 100;\n        this.incomeTimer = 0;\n        this.incomeCooldown = 100;\n\n        if (team === 'red') {\n            this.gold = 999999999;\n        }\n    }\n\n    spend(amt) {\n        if(this.gold >= amt) {\n            this.gold -= amt;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    earn() {\n        if(this.incomeTimer > this.incomeCooldown) {\n            this.gold += this.income;\n            this.incomeTimer = 0;\n        }\n        else {\n            this.incomeTimer += 1;\n        }\n    }\n}\n\nmodule.exports = Player;","const hadokenUrl = require(\"../assets/hadoken1.png\")\n\nclass Projectile {\n    constructor(obj) {\n        this.pos = obj.pos;\n        this.vel = obj.vel;\n        this.team = obj.team;\n        this.width = 50;\n        this.height = 50;\n        this.damage = 1;\n    }\n\n    draw(ctx) {\n        let hadoken = new Image();\n        hadoken.src = hadokenUrl;\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(hadoken, x, y, this.width, this.height)\n    }\n\n    move() {\n        this.pos[0] += this.vel[0];\n        this.pos[1] += this.vel[1];\n    }\n}\n\nmodule.exports = Projectile;","// const Game = require(\"./game.js\");\nconst catUrl1 = require(\"../assets/cat1.png\")\nconst catUrl2 = require(\"../assets/cat2.png\")\nconst catUrl3 = require(\"../assets/cat3.png\")\nconst blobUrl1 = require(\"../assets/blob1.png\")\nconst blobUrl2 = require(\"../assets/blob2.png\")\nconst blobUrl3 = require(\"../assets/blob3.png\")\nconst Projectile = require(\"./projectile\");\n\nconst ANIMATE_FRAMES = 8;\n\nclass Unit {\n\n    constructor(obj) {\n        this.pos = obj.pos;\n        this.vel = obj.vel;\n        this.team = obj.team;\n        this.type = obj.type;\n        this.animationFrame = 0;\n        this.moving = true;\n        this.attacking = false;\n        this.attackCooldown = 80;\n        this.timeBetweenAttacks = 100;\n        this.projectile = 'hadoken';\n        this.width = 50;\n        this.height = 50;\n        this.hp = 3;\n    }\n\n    draw(ctx) {\n        if (this.type === 'cat') {\n            this.renderCat(ctx);\n        } else {\n            this.renderBlob(ctx);\n        }\n    }\n\n    renderCat(ctx) {\n        let cat = new Image();\n        \n        if (this.moving === true) this.animationFrame += 1;\n\n        if(this.animationFrame < ANIMATE_FRAMES) {\n            cat.src = catUrl1;\n        } else if(this.animationFrame >= ANIMATE_FRAMES*2) {\n            cat.src = catUrl2;\n        } else {\n            cat.src = catUrl3;\n        }\n\n        if (this.animationFrame >= ANIMATE_FRAMES * 3) this.animationFrame = 0;\n\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(cat, x, y, this.width, this.height);\n    }\n\n    renderBlob(ctx) {\n        let blob = new Image();\n\n        if (this.moving === true) this.animationFrame += 1;\n        \n        if(this.animationFrame < ANIMATE_FRAMES) {\n            blob.src = blobUrl1;\n        } else if(this.animationFrame >= ANIMATE_FRAMES*2) {\n            blob.src = blobUrl2;\n        } else {\n            blob.src = blobUrl3;\n        }\n\n        if (this.animationFrame >= ANIMATE_FRAMES * 3) this.animationFrame = 0;\n\n        let x = this.pos[0];\n        let y = this.pos[1];\n        ctx.drawImage(blob, x, y, this.width, this.height);\n    }\n\n    attack(enemyPos) {\n        let vel = this.unitVector(this.pos,enemyPos);\n        vel[0] *= 3;\n        vel[1] *= 3;\n\n        if (this.attackCooldown >= this.timeBetweenAttacks) {\n            this.attackCooldown = 0;\n            let pos = this.pos.slice(0)\n            let team = this.team\n            return new Projectile({\n                pos,\n                vel,\n                team,\n            })\n        } else {\n            this.attackCooldown += 1;\n            return null;\n        }    \n    }\n\n    move() {\n        this.pos[0] += this.vel[0];\n        this.pos[1] += this.vel[1];\n    }\n\n    unitVector(attackerPos, defenderPos) {\n        let x = defenderPos[0] - attackerPos[0]\n        let y = defenderPos[1] - attackerPos[1]\n        let divisor = Math.max(Math.abs(x),Math.abs(y))\n        x = x/divisor\n        y = y/divisor\n        return [x,y]\n    }\n}\n\nmodule.exports = Unit;"],"sourceRoot":""}